#!/usr/bin/python
#
# +-------------------------------------------------------------------+
# | A script to redirect all domains owned by a specific person on    |
# | cloudflare to the current IP.                                     |
# +-------------------------------------------------------------------+
# 

import httplib
import urllib2
import json
import sys

class Domain(object):
	def __init__(self, api, properties):
		self.api = api

		self.properties = {}
		self.properties.update(properties)

	def domain_command(self, command, params=None, useprop=None):
		if params == None:
			params = {}

		if useprop == None:
			useprop = {}
		
		paramsfinal = {
			"z": self.properties["zone_name"]
		}
		
		for prop in useprop:
			paramsfinal[prop] = self.properties[prop]

		paramsfinal.update(params)
			
		return self.api.api_command(command, paramsfinal)

# I feel this is too dirty for me		
#	def iter_record(self, type=None):
#		response = self.domain_command("rec_load_all", {})
#
#		for obj in response["recs"]["objs"]:
#			if type and type != obj["type"]:
#				continue
#
#			yield Record(self, obj)

class Record(object):
	def __init__(self, domain, properties):
		self.domain = domain
		
		self.properties = {}
		self.properties.update(properties)

	def record_command(self, command, params=None, useprop=None):
		if params == None:
			params = {}

		if useprop == None:
			useprop = {}
			
		paramsfinal = {
			"id": self.properties["rec_id"]
		}

		for prop in useprop:
			paramsfinal[prop] = self.properties[prop]
		
		paramsfinal.update(params)

		#for item in 
		
		self.domain.domain_command(command, paramsfinal)
			
class CloudFlare(object):
	def __init__(self, email, apitoken):
		self.email = email
		self.token = apitoken

	def https_connect(self):
		self.connection = httplib.HTTPSConnection("www.cloudflare.com")

	def https_get(self, path):
		print path
		self.connection.request("GET", path)
		return self.connection.getresponse().read()

	def api_error(self, msg):
		raise Exception(msg)

	def api_command(self, command, params=None):
		if params == None:
			params = {}
			
		paramsfinal = {
			"email" : self.email,
			"tkn"   : self.token,
			"a"     : command
		}

		paramsfinal.update(params)
		
		paramstring = "?" + "&".join(key + "=" + value for key, value in paramsfinal.items())
		path = "/api_json.html" + paramstring
		response = self.https_get(path)

		responsejson = json.loads(response)
				 
		if responsejson["result"] == "error":
			self.api_error(responsejson["msg"])

		return responsejson["response"]
				 
### Penis
ip = urllib2.urlopen("http://icanhazip.com").read().strip()

connection = CloudFlare(sys.argv[1], sys.argv[2])
connection.https_connect()

domains = connection.api_command("zone_load_multi")["zones"]["objs"]
for domain in map(lambda d: Domain(connection, d), domains):
	records = domain.domain_command("rec_load_all")["recs"]["objs"]
	for record in map(lambda r: Record(domain, r), records):
		if record.properties["type"] == "A" and record.properties["content"] != ip:
			record.properties["content"] = ip
			record.record_command("rec_edit", useprop=("type", "name", "content", "ttl"))
